package com.gopro.queryconstant;

public interface QueryConstant {

	// Invoice Module
	public static final String FIND_ALL_INVOICE_SEARCH = "SELECT inv.invoiceId,inv.customerMobileNo,inv.noOfProduct,inv.totalPrice, inv.paymentType, inv.date,inv.shopId,inv.userId,inv.userName,inv.remarks FROM Invoice inv WHERE inv.invoiceId  = Ifnull(:invoiceId, inv.invoiceId) AND (inv.customerMobileNo = Ifnull(:customerMobileNo, inv.customerMobileNo) OR inv.customerMobileNo is null) AND Upper(inv.noOfProduct)= Upper(Ifnull(:noOfProduct, inv.noOfProduct)) AND inv.totalPrice BETWEEN Ifnull(:startPrice, inv.totalPrice) AND Ifnull(:endPrice, inv.totalPrice) AND ((date >= :fromDate OR :fromDate IS NULL) AND (date <= :toDate OR :toDate IS NULL) ) AND Upper(inv.paymentType) = Upper(Ifnull(:paymentType, inv.paymentType)) AND inv.userId  = Ifnull(:userId, inv.userId) AND Concat_ws(inv.invoiceId,inv.customerMobileNo,inv.noOfProduct, inv.totalPrice, inv.date, inv.paymentType, inv.userName) LIKE :searchKeyWord AND inv.shopId = :shopId";
	
	public static final String SALES_LIST_BY_WEEK_DEFAUL_SHOP = "select sum(totalPrice) totalPrice , date from invoice where shopid = :defaultShopId and date >= :oneWeekBeforeDate group by DATE_FORMAT(date,'%Y-%M-%D')";
	
	public static final String SALES_LIST_BY_MOUNTH_DEFAUL_SHOP = "select sum(totalPrice) totalPrice , date from invoice where shopid = :defaultShopId and date >= :oneWeekBeforeDate group by DATE_FORMAT(date,'%Y-%M')";

	// NotificationModule
	public static final String FIND_NOTIFICATION_BY_INVOICE_ID = "select * from notification where invoiceId=:invoiceId";
	
	public static final String FIND_ALL_NOTIFICATION_SEARCH = "SELECT notif.notificationId, notif.notificationType, notif.Subject, notif.notificationLatUpdateDate, notif.notificationStartData FROM   Notification notif INNER JOIN NotificationMessageMap notmes on notif.notificationId = notmes.notificationId INNER JOIN NotificationUserMap notusr on ( notusr.notificationMessageMapId = notmes.notificationMessageMapId ) INNER JOIN User usr on notusr.sendTo = usr.id WHERE notusr.isDeleted <> 1  AND  notusr.sendTo = :logInUser AND notmes.sendFrom = Ifnull(:sendFrom, notmes.sendFrom) AND notusr.sendTo = Ifnull(:sendTo, notusr.sendTo) AND (trim(lower(notif.Subject)) like trim(lower(Concat_ws('%',:subject,'%'))) OR :subject IS NULL  ) AND ( ( notmes.time >= :fromDate OR :fromDate IS NULL ) AND ( notmes.time <= :toDate OR :toDate IS NULL ) ) AND trim(lower(Concat_ws(usr.firstName,usr.lastName,notif.Subject, notmes.message, notmes.time))) LIKE trim(lower(Concat_ws('%',:searchKeyWord,'%'))) group  by notif.notificationId order  by notif.notificationLatUpdateDate desc";	
		
	public static final String FIND_INBOX_NOTIFICATION_SEARCH = "SELECT notif.notificationId, notif.notificationType, notif.Subject, notif.notificationLatUpdateDate, notif.notificationStartData FROM   Notification notif INNER JOIN NotificationMessageMap notmes on notif.notificationId = notmes.notificationId INNER JOIN NotificationUserMap notusr on ( notusr.notificationMessageMapId = notmes.notificationMessageMapId) INNER JOIN User usr on notusr.sendTo = usr.id WHERE notusr.isDeleted <> 1 AND notusr.mappingType <> 'FROM' AND  notusr.sendTo = :logInUser AND notmes.sendFrom = Ifnull(:sendFrom, notmes.sendFrom) AND notusr.sendTo = Ifnull(:sendTo, notusr.sendTo) AND (trim(lower(notif.Subject)) like trim(lower(Concat_ws('%',:subject,'%'))) OR :subject IS NULL  ) AND ( ( notmes.time >= :fromDate OR :fromDate IS NULL ) AND ( notmes.time <= :toDate OR :toDate IS NULL ) ) AND trim(lower(Concat_ws(usr.firstName,usr.lastName,notif.Subject, notmes.message, notmes.time))) LIKE trim(lower(Concat_ws('%',:searchKeyWord,'%'))) group  by notif.notificationId order  by notif.notificationLatUpdateDate desc";
		
	public static final String FIND_SEND_NOTIFICATION_SEARCH = "SELECT notif.notificationId, notif.notificationType, notif.Subject, notif.notificationLatUpdateDate, notif.notificationStartData FROM   Notification notif INNER JOIN NotificationMessageMap notmes on notif.notificationId = notmes.notificationId INNER JOIN NotificationUserMap notusr on ( notusr.notificationMessageMapId = notmes.notificationMessageMapId ) INNER JOIN User usr on notusr.sendTo = usr.id WHERE notusr.isDeleted <> 1 AND notmes.sendFrom = :logInUser AND notmes.sendFrom = Ifnull(:sendFrom, notmes.sendFrom) AND notusr.sendTo = Ifnull(:sendTo, notusr.sendTo) AND (trim(lower(notif.Subject)) like trim(lower(Concat_ws('%',:subject,'%'))) OR :subject IS NULL  ) AND ( ( notmes.time >= :fromDate OR :fromDate IS NULL ) AND ( notmes.time <= :toDate OR :toDate IS NULL ) ) AND trim(lower(Concat_ws(usr.firstName,usr.lastName,notif.Subject, notmes.message, notmes.time))) LIKE trim(lower(Concat_ws('%',:searchKeyWord,'%'))) group  by notif.notificationId order  by notif.notificationLatUpdateDate desc";
		
	public static final String FIND_STARED_NOTIFICATION_SEARCH = "SELECT notif.notificationId, notif.notificationType, notif.Subject, notif.notificationLatUpdateDate, notif.notificationStartData FROM   Notification notif INNER JOIN NotificationDetail notdtls on notif.notificationId = notdtls.notificationId INNER JOIN NotificationMessageMap notmes on notif.notificationId = notmes.notificationId INNER JOIN NotificationUserMap notusr on ( notusr.notificationMessageMapId = notmes.notificationMessageMapId) INNER JOIN User usr on notusr.sendTo = usr.id WHERE notdtls.isFavorite = 1 AND notdtls.userId = :logInUser AND notusr.isDeleted <> 1 AND  notusr.sendTo = :logInUser AND notmes.sendFrom = Ifnull(:sendFrom, notmes.sendFrom) AND notusr.sendTo = Ifnull(:sendTo, notusr.sendTo) AND (trim(lower(notif.Subject)) like trim(lower(Concat_ws('%',:subject,'%'))) OR :subject IS NULL  ) AND ( ( notmes.time >= :fromDate OR :fromDate IS NULL ) AND ( notmes.time <= :toDate OR :toDate IS NULL ) ) AND trim(lower(Concat_ws(usr.firstName,usr.lastName,notif.Subject, notmes.message, notmes.time))) LIKE trim(lower(Concat_ws('%',:searchKeyWord,'%'))) group  by notif.notificationId order  by notif.notificationLatUpdateDate desc";
	
	public static final String FIND_IMPORTANT_NOTIFICATION_SEARCH = "SELECT notif.notificationId, notif.notificationType, notif.Subject, notif.notificationLatUpdateDate, notif.notificationStartData FROM   Notification notif INNER JOIN NotificationDetail notdtls on notif.notificationId = notdtls.notificationId INNER JOIN NotificationMessageMap notmes on notif.notificationId = notmes.notificationId INNER JOIN NotificationUserMap notusr on ( notusr.notificationMessageMapId = notmes.notificationMessageMapId) INNER JOIN User usr on notusr.sendTo = usr.id WHERE notdtls.isImportant = 1 AND notdtls.userId = :logInUser AND notusr.isDeleted <> 1 AND  notusr.sendTo = :logInUser AND notmes.sendFrom = Ifnull(:sendFrom, notmes.sendFrom) AND notusr.sendTo = Ifnull(:sendTo, notusr.sendTo) AND (trim(lower(notif.Subject)) like trim(lower(Concat_ws('%',:subject,'%'))) OR :subject IS NULL  ) AND ( ( notmes.time >= :fromDate OR :fromDate IS NULL ) AND ( notmes.time <= :toDate OR :toDate IS NULL ) ) AND trim(lower(Concat_ws(usr.firstName,usr.lastName,notif.Subject, notmes.message, notmes.time))) LIKE trim(lower(Concat_ws('%',:searchKeyWord,'%'))) group  by notif.notificationId order  by notif.notificationLatUpdateDate desc";
	
	public static final String FIND_NOTIFICATION_NOTIFICATIONID = "SELECT notif.notificationId, notif.notificationType, notif.Subject, notif.notificationLatUpdateDate, notif.notificationStartData  FROM Notification notif INNER JOIN NotificationMessageMap notmes ON notif.notificationId = notmes.notificationId INNER JOIN NotificationUserMap notusr ON ( notusr.notificationMessageMapId = notmes.notificationMessageMapId AND notusr.isDeleted <> 1 ) WHERE notusr.sendTo = :logInUser AND notif.notificationId = :notificationId order by notmes.time asc LIMIT 1";
	
	public static final String COUNT_NOTIFICATION_AFTER__SEARCH ="SELECT count(*) from (SELECT COUNT(notif.notificationid) FROM   notification notif INNER JOIN notificationmessagemap notmes ON notif.notificationid = notmes.notificationid INNER JOIN notificationusermap notusr ON notusr.notificationmessagemapid = notmes.notificationmessagemapid WHERE  ( notmes.sendfrom = :logInUser OR notusr.sendto = :logInUser ) AND notmes.sendfrom = Ifnull(:sendFrom, notmes.sendfrom) AND notusr.sendto = Ifnull(:sendTo, notusr.sendto) AND notusr.isfavorite = Ifnull(:isFavorite, notusr.isfavorite) AND notusr.isreaded = Ifnull(:isReaded, notusr.isreaded) AND ( ( notmes.time >= :fromDate OR :fromDate IS NULL ) AND ( notmes.time <= :toDate OR :toDate IS NULL ) ) AND Concat_ws(notif.subject, notmes.message, notmes.time) LIKE :searchKeyWord AND notif.notificationLatUpdateDate > :notificationLatUpdateDate GROUP  BY notif.notificationid ORDER  BY notif.notificationlatupdatedate DESC )T";
	
	public static final String UPDATE_NOTIFICATION_LAST_UPDATE_DATE_TIME ="update notification SET notificationLatUpdateDate = :date where notificationId=:notificationId";

	public static final String FIND_USERS_FOR_SEND_MAIL = "select usr.id,usr.username,usr.firstname,usr.lastname,usr.phonenumber,usr.profileimageurl from user usr where usr.parentuserid = :parentUserId OR usr.id = :parentUserId group by usr.id";

}
